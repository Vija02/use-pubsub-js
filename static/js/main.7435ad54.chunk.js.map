{"version":3,"sources":["../../src/hooks/useSubscribe.ts","../../src/hooks/usePublish.ts","service/constants.js","../../src/index.ts","service/publish.js","App.js","index.js"],"names":["Token","TokenTwo","TokenThree","TokenFour","PublishService","interval","undefined","publish","token","this","setInterval","PubSub","clear","clearInterval","ManualExternalMessages","useState","subscriptionCounter","setSubscriptionCounter","useSubscribe","handler","c","unsubscribe","resubscribe","type","onClick","AutoExternalMessages","isUnsubscribe","setIsUnsubscribe","s","ManualPublishMessages","usePublish","message","ReceiveManualPublish","AutoPublishMessages","setMessage","isAutomatic","value","onChange","e","target","ReceiveAutoPublish","lastMessage","setLastMessage","_token","data","FailPublish","lastPublish","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7435ad54.chunk.js","sourcesContent":["import PubSub from 'pubsub-js';\nexport { default as PubSub } from 'pubsub-js';\nimport { useCallback, useEffect, useState } from 'react';\nimport debounce from 'debounce';\n\nvar useSubscribe = function (_a) {\n    var token = _a.token, handler = _a.handler, _b = _a.isUnsubscribe, isUnsubscribe = _b === void 0 ? false : _b;\n    var unsubscribe = useCallback(function () {\n        PubSub.unsubscribe(token);\n    }, [token]);\n    var resubscribe = useCallback(function () {\n        PubSub.unsubscribe(token);\n        PubSub.subscribe(token, handler);\n    }, [token, handler]);\n    useEffect(function () {\n        if (isUnsubscribe) {\n            unsubscribe();\n        }\n        else {\n            PubSub.subscribe(token, handler);\n        }\n        return function () {\n            unsubscribe();\n        };\n    }, [isUnsubscribe]);\n    return { unsubscribe: unsubscribe, resubscribe: resubscribe };\n};\n\nvar usePublish = function (_a) {\n    var token = _a.token, message = _a.message, _b = _a.isAutomatic, isAutomatic = _b === void 0 ? false : _b, _c = _a.isInitialPublish, isInitialPublish = _c === void 0 ? false : _c, _d = _a.isImmediate, isImmediate = _d === void 0 ? false : _d, _e = _a.debounceMs, debounceMs = _e === void 0 ? 300 : _e;\n    var _f = useState(false), lastPublish = _f[0], setLastPublish = _f[1];\n    var publish = useCallback(function () {\n        var isPublished = PubSub.publish(token, message);\n        setLastPublish(isPublished);\n    }, [token, message]);\n    useEffect(function () {\n        if (isInitialPublish) {\n            publish();\n        }\n    }, []);\n    useEffect(function () {\n        var debouncedPublished = debounce(publish, +debounceMs, isImmediate);\n        if (isAutomatic && message) {\n            debouncedPublished();\n        }\n        return function () {\n            debouncedPublished.clear();\n        };\n    }, [publish, isImmediate, isAutomatic, debounceMs]);\n    return { lastPublish: lastPublish, publish: publish };\n};\n\nvar index = { PubSub: PubSub, useSubscribe: useSubscribe, usePublish: usePublish };\n\nexport default index;\nexport { usePublish, useSubscribe };\n//# sourceMappingURL=index.es.js.map\n",null,"export const Token = 'example'\nexport const TokenTwo = 'example_two'\nexport const TokenThree = 'example_three'\nexport const TokenFour = 'example_four'\n",null,"import { PubSub } from 'use-pubsub-js'\n\nexport const PublishService = {\n  interval: undefined,\n  publish(token) {\n    this.interval = setInterval(() => {\n      PubSub.publish(token, 'message')\n    }, 5000)\n  },\n  clear() {\n    clearInterval(this.interval)\n  },\n}\n","import { useState } from 'react'\nimport { usePublish, useSubscribe } from 'use-pubsub-js'\n\nimport { Token, TokenTwo, TokenThree, TokenFour } from './service/constants'\nimport { PublishService } from './service/publish'\n\nPublishService.publish(Token)\nPublishService.publish(TokenTwo)\n\nconst ManualExternalMessages = () => {\n  const [subscriptionCounter, setSubscriptionCounter] = useState(0)\n\n  const handler = () => {\n    setSubscriptionCounter(c => c + 1)\n  }\n\n  const { unsubscribe, resubscribe } = useSubscribe({ token: Token, handler })\n\n  return (\n    <div>\n      <h2>Manual external messages received:</h2>\n      <p>{subscriptionCounter}</p>\n      <button type=\"button\" onClick={unsubscribe}>\n        Unsubscribe\n      </button>\n      <button type=\"button\" onClick={resubscribe}>\n        Resubscribe\n      </button>\n    </div>\n  )\n}\n\nconst AutoExternalMessages = () => {\n  const [subscriptionCounter, setSubscriptionCounter] = useState(0)\n  const [isUnsubscribe, setIsUnsubscribe] = useState(false)\n\n  const handler = () => {\n    setSubscriptionCounter(c => c + 1)\n  }\n\n  useSubscribe({ token: TokenTwo, handler, isUnsubscribe })\n\n  return (\n    <div>\n      <h2>Auto external messages received:</h2>\n      <p>{subscriptionCounter}</p>\n      <button type=\"button\" onClick={() => setIsUnsubscribe(s => !s)}>\n        Change isUnsubscribe\n      </button>\n    </div>\n  )\n}\n\nconst ManualPublishMessages = () => {\n  const { publish } = usePublish({ token: TokenThree, message: 'message' })\n\n  return (\n    <div>\n      <button type=\"button\" onClick={publish}>\n        Publish\n      </button>\n    </div>\n  )\n}\n\nconst ReceiveManualPublish = () => {\n  const [subscriptionCounter, setSubscriptionCounter] = useState(0)\n\n  const handler = () => {\n    setSubscriptionCounter(c => c + 1)\n  }\n\n  useSubscribe({ token: TokenThree, handler })\n\n  return (\n    <div>\n      <h2>Manual messages received:</h2>\n      <p>{subscriptionCounter}</p>\n    </div>\n  )\n}\n\nconst AutoPublishMessages = () => {\n  const [message, setMessage] = useState('')\n\n  usePublish({\n    token: TokenFour,\n    message,\n    isAutomatic: true,\n  })\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n    </div>\n  )\n}\n\nconst ReceiveAutoPublish = () => {\n  const [subscriptionCounter, setSubscriptionCounter] = useState(0)\n  const [lastMessage, setLastMessage] = useState('')\n\n  const handler = (_token, data) => {\n    setSubscriptionCounter(c => c + 1)\n    setLastMessage(data)\n  }\n\n  useSubscribe({ token: TokenFour, handler })\n\n  return (\n    <div>\n      <h2>Automatic messages received:</h2>\n      <p>{subscriptionCounter}</p>\n      <p>Last message: {lastMessage}</p>\n    </div>\n  )\n}\n\nconst FailPublish = () => {\n  const { lastPublish, publish } = usePublish({\n    token: 'fail',\n    message: 'fail',\n  })\n\n  return (\n    <div>\n      {lastPublish ? <p>Publishing success</p> : <p>Publication failure</p>}\n      <button type=\"button\" onClick={publish}>\n        Publish\n      </button>\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <div>\n        <h1>External section</h1>\n        <AutoExternalMessages />\n        <ManualExternalMessages />\n      </div>\n      <div>\n        <h1>Manual section</h1>\n        <ReceiveManualPublish />\n        <ManualPublishMessages />\n      </div>\n      <div>\n        <h1>Automatic section</h1>\n        <ReceiveAutoPublish />\n        <AutoPublishMessages />\n      </div>\n      <div>\n        <h1>Fail section</h1>\n        <FailPublish />\n      </div>\n    </div>\n  )\n}\nexport default App\n","import ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}